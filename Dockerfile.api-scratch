# Use the same NVIDIA CUDA base image with Python 3.13
FROM nvidia/cuda:12.9.1-devel-ubuntu22.04

# Set environment variables to ensure non-interactive installation
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1

# Install Python 3.13 and essential build tools
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.13 python3.13-venv python3.13-dev python3-pip && \
    apt-get install -y --no-install-recommends \
    # Core system packages
    curl wget \
    # Audio libraries and dependencies
    libsndfile1 libsndfile1-dev libsox-dev sox libportaudio2 portaudio19-dev libasound2-dev libpulse-dev libjack-dev \
    # Sample rate conversion library
    libsamplerate0 libsamplerate0-dev \
    # Build tools
    build-essential clang gcc g++ make cmake pkg-config && \
    # Clean up
    rm -rf /var/lib/apt/lists/*

# Make python3.13 the default python
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.13 1 && \
    update-alternatives --set python3 /usr/bin/python3.13 && \
    curl -sS https://bootstrap.pypa.io/get-pip.py | python3.13

# Set up CUDA library paths for NVENC support
RUN echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/cuda.conf && ldconfig

# Install the latest FFmpeg
RUN wget https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-linux64-gpl.tar.xz && \
    tar -xf ffmpeg-master-latest-linux64-gpl.tar.xz && \
    cp ffmpeg-master-latest-linux64-gpl/bin/* /usr/local/bin/ && \
    chmod +x /usr/local/bin/ffmpeg /usr/local/bin/ffprobe && \
    rm -rf ffmpeg-master-latest-linux64-gpl.tar.xz ffmpeg-master-latest-linux64-gpl

# Set up the working directory
WORKDIR /app

# Copy requirements first to leverage Docker layer caching
COPY requirements.txt .

# Install Python dependencies
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . .

# Set environment variables for the application
ENV AUDIO_SEPARATOR_MODEL_DIR="/app/models"
ENV STORAGE_PATH="/app/storage"
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
ENV PATH="/usr/local/cuda/bin:$PATH"

# Expose the port the app runs on
EXPOSE 8000

# Define the command to run the application
CMD ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]
